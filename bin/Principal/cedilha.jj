/*  Cedilha.jj - Analisador Léxico */

options {
  DEBUG_PARSER = false;
  DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(Cedilha)
package Principal;
import java.io.*;
import java.util.*;
import java.util.List;
import java.util.LinkedList;

public class Cedilha {
	static public boolean erro = false;
	static List<Comando> listaComando = new LinkedList<Comando>();

	public static void main(String args[])  throws ParseException  {
		try {
			Cedilha x = new Cedilha(new FileInputStream("main.ç--"));
			inicio(listaComando);
			IO.gravarObjetos("arquivo.bin", new Object[] {listaComando, tabela});         
         	System.out.println("\nTabela de Simbolos (Variaveis): \n\n"+tabela.toString());
		}
		catch(FileNotFoundException e) {
			System.out.println("Arquivo não encontrado");
		}
	}
}

PARSER_END(Cedilha)

SKIP : { " " | "\t" | "\r" | "\n" | "_" }

SKIP : /* Comentários */
{
	"/*" : BLOCO_COMENTARIO
| "//" : LINHA_COMENTARIO
}

<BLOCO_COMENTARIO> SKIP: {
   "*/" : DEFAULT
   | <~[]>
}

<LINHA_COMENTARIO> SKIP: {
   "\n": DEFAULT
   | <~[]> 
}


TOKEN: /* Regras gerais */ {
  <IF: "SeNaoForIsso" >
| <ELSE: "EhIsso" >
| <FIMIF: "FimDisso" >
| <WHILE: "RodeAteQue" >
| <FIMWHILE: "Volta" >
| <INICIOPROG: "Inicia" >
| <FIMPROG: "Termina" >
| <INTEIRO: "Inteiro" >
| <PALAVRA: "Palavra" >
| <MOSTRA: "Mostra" >
| <ENTRADA: "Entrada" >
}

TOKEN: /* Simbolos de Separação*/ {
  < CONCAT: "." >
| < FIMLINHA: ";" >
| < PARENTESQ: "(" >
| < PARENTDIR: ")" >
| < VIRGULA: "," >
}

TOKEN: /* Regra varáveis */ {
	< VARIAVEIS: "$"(["a"-"z","0"-"9"]){1,} >
}

TOKEN : /* Tipos de varáveis */
{
	< NUMEROS:  (["0"-"9"])+ >
|	< PALAVRAS:  "\""(~["\""] | "\\" "\"")*"\"" >
}

TOKEN : /* Operadores Matematicos */
{
	< MAIS: "+" >
|	< MENOS: "-" >
|	< MULTIPLICACAO: "*" >
|     < DIVISAO: "/" >
|     < POTENCIA: "^" >
}

TOKEN : /* Operadores Relacionais */
{
	  < ATRIB: "=">
|     < MAIOR: ">" >
|     < MENOR: "<" >
|     < MAIORIGUAL: "=>" >
|     < MENORIGUAL: "<=" >
|     < IGUAL: "==" >
|     < DIFERENTE: "!=" >
}

TOKEN : /* Operadores Lógicos */
{
      < E: "&" >
|     < OU: "||" >
|     < NAO: "!" >
}

//JAVACODE void S()
//{
//	Token t;
//	do {
//		t = getNextToken();
//		System.out.println(tokenImage[t.kind]+"\t"+t.image);
//	}
//	while(t.kind != EOF);
//}

void inicio(List<Comando> lista) : {}
{
	<INICIOPROG> corpo(lista) <FIMPROG> <EOF>
}

void corpo(List<Comando> lista) : {}
{
    (declaraVar(lista))* (comandos(lista))*
    {
      System.out.println(lista);
   }
}	 

void declaraVar(List<Comando> lista) : { char tp; }
{
	( <NUMEROS> {tp='n';} | <PALAVRAS> {tp='s';})
	listaVar(tp) <FIMLINHA>
}

void listaVar(char tp) : {}
{
	itemListaVar(tp)(<VIRGULA> itemListaVar(tp))*
}

void itemListaVar(char tp) : {Simbolo simb; Token t; Expressao expressao; boolean tipoCerto;}
{
    t=<VARIAVEIS>
	{//acao semantica para verificar se variavel ta sendo declarada pela segunda vez
		if(tabela.isExiste(t.image))
			System.err.println("ERRO!\n Erro Semântico: A váriavel \"" + t.image + "\" foi declarada mais de uma vez\n");
		else{//ação semantica para insercao na tabela de variaveis (insere variavel na tabela se ainda não foi declarada)
			simb = new Simbolo(t.image, tp);
			tabela.inclui(simb);
		}	
	}
	// Variavel pode ser inicializada ou não	 
	(
		<ATRIB> expressao = exp()
		{//Ação semântica para verificar se a váriavel está recebendo uma expressão compatível com seu tipo	
			if(tp == 'n')
				tipoCerto = expressao.isExpressaoNumerica(tabela);
			else
				tipoCerto = expressao.isExpressaoTexto();
		
			if(!tipoCerto)
				System.err.println("ERRO!\n Erro Semântico: O tipo da variavel \"" + t.image + "\" não é compatível com a expressão atribuida"+"\n");
						
		}
		{// Ação semãntica para incluir na tabela que variavel foi inicializada
			tabela.inicializaIdent(t.image);
	    }		
	)?
}

void comandos(List<Comando> lista) : {Comando comando = new Comando('A');Token t; Expressao expressao; boolean tipoCerto; boolean foiDeclarada=true;} 
{
	atribuicao(lista) | SeNaoForIsso(lista) | RodeAteQue(lista) | Entrada(lista) | Mostra(lista)
}

void atribuicao(List<Comando> lista) : {Comando comando = new Comando('A');Token t; Expressao expressao; boolean tipoCerto; boolean foiDeclarada=true;} 
{
	t=<VARIAVEIS>
	{comando.setRef1(t.image);}
	{// Ação semãntica para verificar se variavel foi declarada 
		if(!tabela.isExiste(t.image)){
			System.err.println("ERRO!\n Erro Semantico: A váriavel \"" + t.image + "\" não foi declarada\n");
			foiDeclarada = false;
		}	
	}
	
	<ATRIB> 
	
	expressao = exp()
	
	{
		comando.setRef2(expressao);
	}
	
	 <FIMLINHA>
	{//Ação semântica para verificar se a váriavel está recebendo uma expressão compatível com seu tipo	
		if(foiDeclarada){
			if(tabela.getSimbolo(t.image).getTipo() == 'n')
				tipoCerto = expressao.isExpressaoNumerica(tabela);
			else
				tipoCerto = expressao.isExpressaoTexto();
		
			if(!tipoCerto)
		    	System.err.println("ERRO!\n Erro Semântico: O tipo da variavel \"" + t.image + "\" não é compatível com a expressão atribuida"+"\n");
		}    
	}
	{// Ação semãntica para incluir na tabela que variavel foi inicializada
		tabela.inicializaIdent(t.image);
		lista.add(comando);
	}
}

//O mesmo exp é usado para todos os comandos - A incompatibilidade de tipos será verificada depois
Expressao exp() : {Expressao listaExp = new Expressao();}
{
	expAuxiliar(listaExp)
	{return listaExp;}
}	

void expAuxiliar(Expressao listaExp) : {}
{
	termo(listaExp)
}

void termo(Expressao listaExp) : {Token t; Item item;}
{
	// A listaExp é usada para armazenar uma expressao no formato pós-fixo
	// O roteiro (9.3) sugere um linkedList local sendo passado para os outros métodos e sugere que encapsule o linkedList
	// como foi feito com a classe Expressao
	termo1(listaExp) 
	(
		 t=<OU> termo1(listaExp)
		 {//Depois que os dois termos da operação foram armazenados na lista, então o operador é armazenado   
		 	item = new Item('o', t.image);
		 	listaExp.inclui(item);
		 }
    )*	
   // {System.out.println("Expressão no formato pós fixo: \n"+listaExp.toString()+"\n");} //Testando para ver se está certo	
}

void termo1(Expressao listaExp) : {Token t; Item item;}
{
	termo2(listaExp) 
	( 
		t=<E> termo2(listaExp)
		{
			item = new Item('o', t.image);
		 	listaExp.inclui(item);
		}
	)*
}

void termo2(Expressao listaExp) : {Token t; Item item;}
{
	termo3(listaExp) 
	 ( 
	 	(t=<MAIOR> | t=<MENOR> | t=<MAIORIGUAL> | t=<MENORIGUAL> | t=<DIFERENTE> | t=<IGUAL>) 
	     termo3(listaExp)
	 	{
	 		item = new Item('o', t.image);
		 	listaExp.inclui(item);
	 	}
	 )*
}

void  termo3(Expressao listaExp) : {Token t; Item item; }
{
	termo4(listaExp) 
	( 
		t=<MAIS> termo4(listaExp)
		{//Seção 9.5 - Otimiza a expressao (otimizaExp é para calculos envolvendo constantes (5+4+a==9+a), 
		 //tambem é verificado a existencia de elementos neutro e tem o adicional de otimizacao de string("ab"+"c"="abc"))
		 //O operador só será inserido se não for possivel nenhuma das otimizações 
			if(!listaExp.otimizaExpressao('+') && !listaExp.otimizaString()){
				item = new Item('o', t.image);
				listaExp.inclui(item);	
			}
		}	
		
		| 
		
		t=<MENOS> termo4(listaExp)
		{
			if(!listaExp.otimizaExpressao('-')){
				item = new Item('o', t.image);
				listaExp.inclui(item);	
			}
    		
		}
	)*
}

void  termo4(Expressao listaExp) : {Token t; Item item;}
{
	termo5(listaExp) 
	(
		 
		  t=<MULTIPLICACAO> termo5(listaExp)
		  {
		  	if(!listaExp.otimizaExpressao('*')){
				item = new Item('o', t.image);
				listaExp.inclui(item);	
			}
		  }
		   
		 |
		 
		  t=<DIVISAO> termo5(listaExp)
		 {
		 	if(!listaExp.otimizaExpressao('/')){
				item = new Item('o', t.image);
				listaExp.inclui(item);	
			}
		 }
	)*
}

void  termo5(Expressao listaExp) : {Token t; Item item;}
{
	termo6(listaExp) 
	( 
		t=<POTENCIA> termo5(listaExp) //Forma que encontrei para ser avaliado da direita para esquerda 
		{
			if(!listaExp.otimizaExpressao('^')){
				item = new Item('o', t.image);
				listaExp.inclui(item);	
			}	
		}
	)* 
}

void  termo6(Expressao listaExp) : {Token t=null; Item item; int cont_OP_NOT=0;}
{
	( t=<NAO> {cont_OP_NOT++;})* termo7(listaExp)
	{// Se não tiver nenhum operador not não tem nehum operador a armazenar
		if(t != null && (cont_OP_NOT % 2 != 0)){
			item = new Item('o', t.image);
			listaExp.inclui(item);
		}	
	}
}

void termo7(Expressao listaExp) : {Token t, t_aux=null; Item item; String num;}
{
	  //t_aux é usado para concatenar um op_adi com um numero e assim armazena-lo em num para inserir na lista 	(exemplo: +2)
	  (t_aux=<MENOS> | t_aux=<MAIS>)? t=<NUMEROS>
	  {// t_aux pode não ter pois é opicional o sinal a frente do numero
	  	if(t_aux != null)
	  		num = t_aux.image + t.image;
	  	else	
	  		num = t.image;
	    item = new Item('n', num);
        listaExp.inclui(item);
	  }
	  
	|
	
	 t=<VARIAVEIS>
	  {// Verifica se foi declarado
		if(!tabela.isExiste(t.image))
			System.err.println("ERRO!\n Erro Semantico: A váriavel \"" + t.image + "\" não foi declarada\n");
	  }
	  {//Verifica se foi inicializado
	  	if(!tabela.foiInicializado(t.image))
	  		System.err.println("ERRO!\n Erro Semantico: A váriavel \"" + t.image + "\" não foi inicializada\n");
	  }
	  {// Armazena na lista		
		item = new Item('v', t.image);
       	listaExp.inclui(item);	
      }	 
      
	| 
	
	 t=<PALAVRAS>
	 {
		item = new Item('s', t.image);
       	listaExp.inclui(item);	
	 }
	 
	| 
	 //O expAuxiliar existe pois: Cada vez que ocorrer um parênteses na expressão, o exp será 
	 //chamado e será criada uma nova lista precisando assim concatena-la a lista "principal" para formar só uma lista
	 <PARENTESQ> expAuxiliar(listaExp) <PARENTDIR>
}

void SeNaoForIsso(List<Comando> lista) : {LinkedList<Comando> listaSe = new LinkedList<Comando>();Comando se = new Comando('S');Expressao expressao;}
{
	<IF> <PARENTESQ>
	
	expressao = exp() 
	
	{
	 se.setRef1(expressao);
	 
	//Verifica se a expressao utilizada na condicao é compativel
	if(!expressao.isExpressaoCondicional(tabela))
		System.err.println("ERRO!\n Erro Semântico: A condição utilizada na estrutura se(){} não é compatível\n");
	}
	
	
	<PARENTDIR>

	(
		comandos(listaSe)
	)*
	  
	{
		se.setRef2(listaSe);
	}
	
	( EhIsso(lista,se) )?
	
	{
		lista.add(se);
	}
}
	     		
void EhIsso(List<Comando> lista,Comando se) : {LinkedList<Comando> listaSenao = new LinkedList<Comando>();}
{
	<ELSE>
	 
	(
		comandos(listaSenao)
	)*
	  
	{
		se.setRef3(listaSenao);
	} 
	  
	<FIMIF>
}

void RodeAteQue(List<Comando> lista) : {LinkedList<Comando> listaEnquanto = new LinkedList<Comando>();Comando enquanto = new Comando('E');Expressao expressao;}
{
	 <WHILE> <PARENTESQ> 
	 
	  expressao = exp()
	  
	 {
	 	enquanto.setRef1(expressao);

		//Verifica se a expressao utilizada na condicao é compativel
		if(!expressao.isExpressaoCondicional(tabela))
			System.err.println("ERRO!\n Erro Semântico: A condição utilizada na estrutura enquanto(){} não é compatível\n");
	 }	 
	 <PARENTDIR>

	  (
	    comandos(listaEnquanto)  
	  )*
	  
	  {
	  	enquanto.setRef2(listaEnquanto);
	  	lista.add(enquanto);
	  }

	 <FIMWHILE>
}

void Entrada(List<Comando> lista) : {}
{
	<ENTRADA> <PARENTESQ> corpoEntrada(lista)<PARENTDIR> <FIMLINHA>
}

void corpoEntrada(List<Comando> lista) : {Comando comandoImprime = new Comando('I');Comando comandoLeia = new Comando('L');Token t;}
{
	 (t=<PALAVRAS> <VIRGULA>
	   {
	   	 comandoImprime.setRef1(t.image);
	   	 lista.add(comandoImprime);
	   }
	 )?
	 
	  t=<VARIAVEIS>
	  
	  {
	  	comandoLeia.setRef1(t.image);
	  	lista.add(comandoLeia);
	  } 
	  
	 {
		if(!tabela.isExiste(t.image))
			System.err.println("ERRO!\n Erro Semantico: A váriavel \"" + t.image + "\" não foi declarada\n");
     }	
     {// Ação semãntica para incluir na tabela que variavel foi inicializada
		tabela.inicializaIdent(t.image);
	 } 
  
    (
    	<VIRGULA> t=<VARIAVEIS>
    	
    	{
	  	    comandoLeia.setRef1(t.image);
	  	    lista.add(comandoLeia);
	    }
    	
    	{
    		if(!tabela.isExiste(t.image))
				System.err.println("ERRO!\n Erro Semantico: A váriavel \"" + t.image + "\" não foi declarada\n");
    	}
    	{// Ação semãntica para incluir na tabela que variavel foi inicializada
			tabela.inicializaIdent(t.image);
		}
    )*
}

void Mostra(List<Comando> lista) : {Expressao expressao;}
{
	<MOSTRA> <PARENTESQ> corpoMostra(lista) <PARENTDIR> <FIMLINHA>
}

void corpoMostra(List<Comando> lista) : {Expressao expressao;Comando comandoExibe = new Comando('I');Token t;}
{	
   (t=<PALAVRAS> <VIRGULA> 
        {
           comandoExibe.setRef1(t.image);
   	       lista.add(comandoExibe);
        }
    )?
   
    expressao = exp()
	    
    {
		if(!expressao.isExpressaoTexto())
			System.err.println("ERRO!\n Erro Semântico: A expressão utilizada na estrutura exibe() não é compatível\n");
	   	 
	   	comandoExibe.setRef1(expressao);
	   	lista.add(comandoExibe);
	}
}