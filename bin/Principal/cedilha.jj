/*  Cedilha.jj - Analisador Léxico */

options {
  DEBUG_PARSER = false;
  DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(Cedilha)
package Principal;
import java.io.*;

public class Cedilha {
	public static void main(String args[])  throws ParseException  {
		try {
			Cedilha x = new Cedilha(new FileInputStream("main.ç--"));
			x.S();
		}
		catch(FileNotFoundException e) {
			System.out.println("Arquivo não encontrado");
		}
	}
}

PARSER_END(Cedilha)

SKIP : { " " | "\t" | "\r" | "\n" | "_" }

SKIP : /* Comentários */
{
	"/*" : BLOCO_COMENTARIO
| "//" : LINHA_COMENTARIO
}

<BLOCO_COMENTARIO> SKIP: {
   "*/" : DEFAULT
   | <~[]>
}

<LINHA_COMENTARIO> SKIP: {
   "\n": DEFAULT
   | <~[]>
}


TOKEN: /* Regras gerais */ {
  <IF: "SeNaoForIsso" >
| <ELSE: "EhIsso" >
| <FIMIF: "FimDisso" >
| <WHILE: "RodeAteQue" >
| <FIMWHILE: "Volta" >
| <INICIOPROG: "Inicia" >
| <FIMPROG: "Termina" >
| <INTEIRO: "Inteiro" >
| <PALAVRA: "Palavra" >
| <MOSTRA: "Mostra" >
| <ENTRADA: "Entrada" >
}

TOKEN: /* Simbolos de Separação*/ {
  < CONCAT: "." >
| < FIMLINHA: ";" >
| < PARENTESQ: "(" >
| < PARENTDIR: ")" >
| < VIRGULA: "," >
}

TOKEN: /* Regra varáveis */ {
	< VARIAVEIS: "$"(["a"-"z","0"-"9"]){1,} >
}

TOKEN : /* Tipos de varáveis */
{
	< NUMEROS:  (["0"-"9"])+ >
|	< PALAVRAS:  "\""(~["\""] | "\\" "\"")*"\"" >
}

TOKEN : /* Operadores Matematicos */
{
	< MAIS: "+" >
|	< MENOS: "-" >
|	< MULTIPLICACAO: "*" >
|     < DIVISAO: "/" >
|     < POTENCIA: "^" >
}

TOKEN : /* Operadores Relacionais */
{
	  < ATRIB: "=">
|     < MAIOR: ">" >
|     < MENOR: "<" >
|     < MAIORIGUAL: "=>" >
|     < MENORIGUAL: "<=" >
|     < IGUAL: "==" >
|     < DIFERENTE: "!=" >
}

TOKEN : /* Operadores Lógicos */
{
      < E: "&" >
|     < OU: "||" >
|     < NAO: "!" >
}

//JAVACODE void S()
//{
//	Token t;
//	do {
//		t = getNextToken();
//		System.out.println(tokenImage[t.kind]+"\t"+t.image);
//	}
//	while(t.kind != EOF);
//}

void inicio() : {}
{
	<INICIOPROG> corpo() <FIMPROG> <EOF>
}

void corpo() : {}
{
    (declaraVar())* (comandos())*
}	 

void declaraVar() : {}
{
	( <NUMEROS> | <PALAVRAS> ) listaVar() <FIMLINHA>
}

void listaVar() : {}
{
	itemListaVar() (<VIRGULA> itemListaVar() )*
}

void itemListaVar() : {}
{
    <VARIAVEIS>(<ATRIB>exp())?
}

void comandos() : {}
{
	atribuicao() | SeNaoForIsso() | RodeAteQue() | Entrada() | Mostra()
}

void atribuicao() : {} 
{
	<VARIAVEIS><ATRIB>exp()<FIMLINHA>
}

Expressao exp() : {}
{
	expAuxiliar()
}	

void expAuxiliar() : {}
{
	termo()
}	

void termo() : {}
{
	termo1()(<OU> termo1())*	
}

void termo1() : {}
{
	termo2()(<E> termo2())*
}

void termo2() : {}
{
	termo3()((<MAIOR> | <MENOR> | <MAIORIGUAL> | <MENORIGUAL> | <DIFERENTE> | <IGUAL>) termo3())*
}

void  termo3() : {}
{
	termo4()( <MAIS> termo4()| <MENOS> termo4())*
}

void  termo4() : {}
{
	termo5()( <MULTIPLICACAO> termo5()| <DIVISAO> termo5())*
}

void  termo5() : {}
{
	termo6()( <POTENCIA> termo5())*
}

void  termo6() : {}
{
	(<NAO>)* termo7()
}

void termo7() : {}
{
	(<MENOS> |<MAIS>)? <NUMEROS>
	|
	 <VARIAVEIS>
	| 
	 <PALAVRAS>
	| 
	 <PARENTESQ> expAuxiliar() <PARENTDIR>
}

void SeNaoForIsso() : {}
{
	<IF> <PARENTESQ> exp() <PARENTDIR> (comandos())* (EhIsso())?
}
	     		
void EhIsso() : {}
{
	<ELSE> (comandos())*<FIMIF>
}

void RodeAteQue() : {}
{
	 <WHILE> <PARENTESQ>exp()<PARENTDIR> (comandos())*<FIMWHILE>
}

void Entrada() : {}
{
	<ENTRADA> <PARENTESQ> corpoEntrada()<PARENTDIR> <FIMLINHA>
}

void corpoEntrada() : {}
{
	(<PALAVRAS> <VIRGULA>)?<VARIAVEIS>(<VIRGULA><VARIAVEIS>)*
}

void Mostra() : {}
{
	<MOSTRA> <PARENTESQ> corpoMostra() <PARENTDIR> <FIMLINHA>
}

void corpoMostra() : {}
{	
	<PALAVRAS> <VIRGULA> exp()
}